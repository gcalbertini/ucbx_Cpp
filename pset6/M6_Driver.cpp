// MODULE:		M6_Driver.cpp
// PROGRAMMER:	Guilherme Albertini
// LANGUAGE:	C++
// DATE:		20/09/04	
//
// PURPOSE:
//		Driver for classes.

#include <iostream>
#include "basechild.h"



int main(void)
{
	using std::cout;
	using std::cin;
	using std::endl;

	cout << "Now creating entry for human..." << endl;
	cout << endl;

	string name;
	cout << "Enter this person's name: \n";
	getline(cin, name);

	string address;
	cout << "Enter the adult's home address: \n";
	getline(cin, address);

	string gender;
	cout << "Enter this person's gender: \n";
	getline(cin, gender);

	int dob;
	cout << "Enter this person's date of birth, using YYYYMMDD format: \n";
	cin >> dob;

	long long social;
	cout << "Enter this person's SSN, using ######## format: \n";
	cin >> social;

	long long number;
	cout<< "Enter this person's home phone number, using ########## format: \n";
	cin >> number;

	cout << endl;

	int typeClass = 0;
	int	choice = 0;

	cout << "Will this entry represent a general person (1), employee (2), dependent (3), manager (4), or worker (5)? Select one option 1 to 5: " << endl;
	(cin >> typeClass).get();

	cout << endl;

	string work, childHome, title, project;
	long long wnumber{};
	double money{};
	int hired{};

	if ((typeClass == 2) || (typeClass == 4) || (typeClass == 5))
	{
		cout << "Enter employee work address: " << endl;
		getline(cin, work);

		cout << "Enter employee work phone number: " << endl;
		cin >> wnumber;

		cout << "Enter employee salary: " << endl;
		cin >> money;

		cout << "Enter employee date of hire, using YYYYMMDD format: " << endl;
		(cin >> hired).get();
	}


	if (typeClass == 3)
	{
		cout << "Enter the dependent's guardian's work address: " << endl;
		getline(cin, work);

		cout << "Enter the dependent's guardian's work phone number: " << endl;
		cin >> wnumber;

		cout << "Enter this dependent's guardian's salary: " << endl;
		cin >> money;

		cout << "Enter this dependent's guardian's date of hire, using YYYYMMDD format: " << endl;
		cin >> hired;
	}

	if (typeClass == 4)
	{
		cout << "Enter this employees's managerial title: " << endl;
		getline(cin, title);

	}

	if (typeClass == 5)
	{
		cout << "Enter this worker's project: " << endl;
		getline(cin, project);

	}
	
	cout << endl;

	cout << "Enter 1 to view details or 2 to change available info. Enter 3 to quit: " << endl;
	cin >> choice;

	int temp; string str; 
	
	cout << endl;

	if (typeClass == 1)
	{
		person human(name, gender, address, social, dob, number); 
		person* ptr = &human;

		while (choice != 3)
		{
			if (choice == 1) { ptr->Show(); };

			if (choice == 2)
			{
				cout << "Select 1 to change name; select 2 to change gender; select 3 to change home address; select 4 to change home phone number: " << endl;

				//when cin reads in temp, it leaves the newline generated by the Enter key in the input queue. Then getline() reads the newline as an empty line
				//and assigns a null string to str.The fix is to read and discard the newline before reading the str
				(cin >> temp).get();

				if (temp != 4)
				{
					cout << "Update your info below: \n";
					getline(cin, str);
					ptr->ChangeString(temp, str);

				}
				else
				{
					cout << "Update the phone number below: " << endl;
					cin >> temp;
					ptr->ChangeNum(temp);
				}

			}
			cout << endl;
			cout << "Enter 1 to view details or 2 to change available info. Enter 3 to quit: " << endl;
			(cin >> choice).get();
			cout << endl;
		}

		
	}



	if (typeClass == 2)
	{
		employee human(name, gender, address, social, dob, number, work, hired, wnumber, money);
		employee* ptr = &human;

		while (choice != 3)
		{
			if (choice == 1) { ptr->Show(); };

			if (choice == 2)
			{
				cout << "Select 1 to change name; select 2 to change gender; select 3 to change home address; select 4 to change home phone; select 5 to change work phone; select 6 to change salary: " << endl;

				//when cin reads in temp, it leaves the newline generated by the Enter key in the input queue. Then getline() reads the newline as an empty line
				//and assigns a null string to str.The fix is to read and discard the newline before reading the str
				(cin >> temp).get();

				cout << "Update your info below: \n";
				getline(cin, str);
				ptr->ChangeString(temp, str);
				
			}
			cout << endl;
			cout << "Enter 1 to view details or 2 to change available info. Enter 3 to quit: " << endl;
			(cin >> choice).get();
			cout << endl;
		}
	}


	if (typeClass == 3)
	{
		employee parent(name, gender, address, social, dob, number);
		dependent child(parent, childHome);

		dependent* ptr = &child;

		while (choice != 3)
		{
			if (choice == 1) { ptr->Show(); };

			if (choice == 2)
			{
				cout << "Select 1 to change name; select 2 to change gender; select 3 to change address of dependent (if not shared with employee): " << endl;

				//when cin reads in temp, it leaves the newline generated by the Enter key in the input queue. Then getline() reads the newline as an empty line
				//and assigns a null string to str.The fix is to read and discard the newline before reading the str
				(cin >> temp).get();

				if (temp == 1 || temp == 2 || temp == 3)
				{
					cout << "Update dependent info below: \n";
					getline(cin, str);
					ptr->ChangeString(temp, str);
				}

			}
			cout << endl;
			cout << "Enter 1 to view details or 2 to change available info;  Enter 3 to quit: " << endl;
			(cin >> choice).get();
			cout << endl;
		}
	}


	if (typeClass == 4)
	{
		employee special(name, gender, address, social, dob, number, work, hired, wnumber, money);
		manager boss(special, title);

		manager* ptr = &boss;

		while (choice != 3)
		{
			if (choice == 1) { ptr->Show(); };

			if (choice == 2)
			{
				cout << "Select 1 to change name; select 2 to change gender; select 3 to change home address; select 4 to change home phone; select 5 to change work phone; select 6 to change salary; select 7 to change managerial title: " << endl;

				//when cin reads in temp, it leaves the newline generated by the Enter key in the input queue. Then getline() reads the newline as an empty line
				//and assigns a null string to str.The fix is to read and discard the newline before reading the str
				(cin >> temp).get();

				cout << "Update your info below: \n";
				getline(cin, str);
				ptr->ChangeString(temp, str);

			}
			cout << endl;
			cout << "Enter 1 to view details or 2 to change available info. Enter 3 to quit: " << endl;
			(cin >> choice).get();
			cout << endl;
		}
	}



	if (typeClass == 5)
	{
		employee base(name, gender, address, social, dob, number, work, hired, wnumber, money);
		worker boss(base, project);

		worker* ptr = &boss;

		while (choice != 3)
		{
			if (choice == 1) { ptr->Show(); };

			if (choice == 2)
			{
				cout << "Select 1 to change name; select 2 to change gender; select 3 to change home address; select 4 to change home phone; select 5 to change work phone; select 6 to change salary; select 7 to change project worked: " << endl;

				//when cin reads in temp, it leaves the newline generated by the Enter key in the input queue. Then getline() reads the newline as an empty line
				//and assigns a null string to str.The fix is to read and discard the newline before reading the str
				(cin >> temp).get();

				cout << "Update your info below: \n";
				getline(cin, str);
				ptr->ChangeString(temp, str);

			}
			cout << endl;
			cout << "Enter 1 to view details or 2 to change available info. Enter 3 to quit: " << endl;
			(cin >> choice).get();
			cout << endl;
		}
	}










	return 0;
}